from flask import Flask, request, render_template
from keras.models import load_model
import cv2
import numpy as np
import tensorflow as tf
from image_processing import preprocess
from num_to_label import num_to_label

app = Flask(__name__)

# Load your model here
model = load_model(
    "C:\\Users\\nigam\\Downloads\\saved_hdf5_model.h5", compile=False
)  # Disable model compilation


# Define your preprocess function here
# def preprocess(img, imgSize):
#     # Your preprocessing code goes here
#     # create target image and copy sample image into it
#     widthTarget, heightTarget = imgSize
#     height, width = img.shape
#     factor_x = width / widthTarget
#     factor_y = height / heightTarget

#     factor = max(factor_x, factor_y)
#     # scale according to factor
#     newSize = (
#         min(widthTarget, int(width / factor)),
#         min(heightTarget, int(height / factor)),
#     )

#     img = cv2.resize(img, newSize)
#     target = np.ones(shape=(heightTarget, widthTarget), dtype="uint8") * 255
#     target[0 : newSize[1], 0 : newSize[0]] = img
#     # transpose
#     img = cv2.transpose(target)
#     # standardization
#     mean, stddev = cv2.meanStdDev(img)
#     mean = mean[0][0]
#     stddev = stddev[0][0]
#     img = img - mean
#     img = img // stddev if stddev > 0 else img
#     return img


# Define your num_to_label function here
# def num_to_label(num):
#     alphabets = "0123456789' "
#     ret = ""
#     for ch in num:
#         if ch == -1:  # CTC Blank
#             break
#         else:
#             ret += alphabets[ch]
#     return ret


@app.route("/", methods=["GET", "POST"])
def upload_file():
    if request.method == "POST":
        file = request.files["file"]
        if not file:
            return render_template(
                "index.html", prediction_text="No file found. Please upload an image."
            )

        # Read the image in grayscale
        image = cv2.imdecode(np.fromstring(file.read(), np.uint8), cv2.IMREAD_GRAYSCALE)

        # Preprocess the image here
        image = preprocess(image, (128, 32))
        image = image / 255.0

        # Predict the label for the image
        pred = model.predict(image.reshape(1, 128, 32, 1))
        decoded = tf.keras.backend.get_value(
            tf.keras.backend.ctc_decode(
                pred, input_length=np.ones(pred.shape[0]) * pred.shape[1], greedy=True
            )[0][0]
        )

        # Convert numerical predictions to labels
        predicted_label = num_to_label(decoded[0])
        print(type(predicted_label))

        # Return the predicted label
        return render_template(
            "index.html", prediction_text="Predicted Label: {}".format(predicted_label)
        )

    return render_template("index.html")


if __name__ == "__main__":
    app.run(debug=True)
